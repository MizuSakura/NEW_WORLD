# src/utils/sequence_builder.py
import numpy as np

def create_sequences(data, window_size):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á input-output sequence ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LSTM
    ------------------------------------------
    Args:
        data : np.ndarray (N, n_features)
            ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° input + output ‡πÑ‡∏ß‡πâ
            ‡πÄ‡∏ä‡πà‡∏ô [[PWM, Tank_Level], ...]
        window_size : int
            ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô timestep ‡∏ï‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á sequence (‡πÄ‡∏ä‡πà‡∏ô 30)
    
    Returns:
        X : np.ndarray, shape (num_seq, window_size, n_features)
            ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• input
        y : np.ndarray, shape (num_seq,)
            ‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô Tank_Level ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
    """
    X, y = [], []
    for i in range(len(data) - window_size):
        X.append(data[i:(i + window_size)])
        y.append(data[i + window_size, 1])  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 1 (output)

    return np.array(X), np.array(y)


if __name__ == "__main__":
    # üß™ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    print("üß© Testing create_sequences() ...")

    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• [input, output]
    time = np.arange(0, 10, 0.1)
    data_input = np.sin(time)
    data_output = np.cos(time)
    data = np.column_stack((data_input, data_output))

    X, y = create_sequences(data, window_size=5)

    print(f"‚úÖ X shape: {X.shape}  | y shape: {y.shape}")
    print("üîç Example X[0]:", X[0])
    print("üîç Example y[0]:", y[0])
