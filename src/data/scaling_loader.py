import joblib
import yaml
import zipfile
import io
import warnings
import numpy as np
from pathlib import Path
from sklearn.preprocessing import MinMaxScaler

class ScalingZipLoader:
    def __init__(self, zip_path):
        self.zip_path = Path(zip_path)
        self.scaler_in = None
        self.scaler_out = None
        self.metadata = None
        self._load_from_zip()

    def _get_file_from_zip(self, zipf, name_keyword):
        for info in zipf.infolist():
            if name_keyword in info.filename:
                with zipf.open(info) as f:
                    return f.read()
        raise FileNotFoundError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ '{name_keyword}' ‡πÉ‡∏ô zip")

    def _safe_load_yaml(self, zipf, filename="metadata.yaml"):
        try:
            with zipf.open(filename) as f:
                return yaml.safe_load(f)
        except KeyError:
            warnings.warn(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö {filename} ‡πÉ‡∏ô zip ‚Äî metadata ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô None", UserWarning)
            return None

    def _load_from_zip(self):
        if not self.zip_path.exists():
            raise FileNotFoundError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå ZIP ‡∏ó‡∏µ‡πà {self.zip_path}")
        with zipfile.ZipFile(self.zip_path, "r") as zipf:
            self.scaler_in = joblib.load(io.BytesIO(self._get_file_from_zip(zipf, "input_scaler")))
            self.scaler_out = joblib.load(io.BytesIO(self._get_file_from_zip(zipf, "output_scaler")))
            self.metadata = self._safe_load_yaml(zipf)

    def transform_input(self, X):
        return self.scaler_in.transform(X)

    def inverse_output(self, y_scaled):
        return self.scaler_out.inverse_transform(y_scaled)

    def is_loaded(self):
        return all([self.scaler_in is not None, self.scaler_out is not None])

    def summary(self):
        print("üì¶ ScalingZipLoader Summary:")
        if self.metadata:
            for k, v in self.metadata.items():
                print(f"  {k}: {v}")
        else:
            print("  ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata")

# =====================================================
# üîΩ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (Test Section)
# =====================================================
if __name__ == "__main__":
    print("üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ScalingZipLoader ...")

    test_zip_path = Path(r"D:\Project_end\New_world\my_project\config\RC_Tank_Env_Training2_scalers.zip")

    # üß≠ ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    if test_zip_path.exists():
        print(f"üìÇ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà: {test_zip_path}")
        choice = input("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (r) ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå ‡∏´‡∏£‡∏∑‡∏≠ (w) ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà? [r/w]: ").strip().lower()
    else:
        choice = "w"

    if choice == "w":
        print("‚úèÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå zip ‡πÉ‡∏´‡∏°‡πà...")

        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
        X = np.array([[0], [1], [2], [3], [4]], dtype=float)
        scaler_in = MinMaxScaler(feature_range=(-1, 1)).fit(X)
        scaler_out = MinMaxScaler(feature_range=(0, 10)).fit(X)
        metadata = {
            "input_feature_range": "(-1, 1)",
            "output_feature_range": "(0, 10)",
            "description": "Test scaler zip file",
        }

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á zip ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        with zipfile.ZipFile(test_zip_path, "w") as zipf:
            buffer_in = io.BytesIO()
            joblib.dump(scaler_in, buffer_in)
            zipf.writestr("input_scaler.pkl", buffer_in.getvalue())

            buffer_out = io.BytesIO()
            joblib.dump(scaler_out, buffer_out)
            zipf.writestr("output_scaler.pkl", buffer_out.getvalue())

            zipf.writestr("metadata.yaml", yaml.safe_dump(metadata))

        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå zip ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà: {test_zip_path.resolve()}")

    elif choice == "r":
        print("üìñ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å zip ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà...")

    else:
        print("‚ö†Ô∏è ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚Äî ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ó‡∏ô")
    
    # ‡πÇ‡∏´‡∏•‡∏î zip ‡∏î‡πâ‡∏ß‡∏¢ ScalingZipLoader
    loader = ScalingZipLoader(test_zip_path)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• summary
    loader.summary()

    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á transform & inverse
    X_test = np.array([[1.5], [3.0]])
    X_scaled = loader.transform_input(X_test)
    y_inverse = loader.inverse_output(X_scaled)

    print("\nüîπ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    print(f"  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö:\n{X_test}")
    print(f"  ‡∏´‡∏•‡∏±‡∏á scale ‡∏î‡πâ‡∏ß‡∏¢ input_scaler:\n{X_scaled}")
    print(f"  inverse ‡∏î‡πâ‡∏ß‡∏¢ output_scaler:\n{y_inverse}")

    print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")